{"version":3,"sources":["app/components/navbar/Navbar.js","app/components/user/User.js","app/components/TimeAgo.js","app/components/gist/GistsList.js","services/user.js","app/reducer/userStore.js","services/gist.js","app/reducer/gistStore.js","app/components/home/Home.js","app/components/gist/GistDetail.js","App.js","app/store.js","serviceWorker.js","index.js","assets/logo.svg"],"names":["Navbar","Fragment","to","alt","className","src","logo","User","avatar","name","TimeAgo","timestamp","timeAgo","dateFormat","date","parseISO","timePeriod","formatDistanceToNow","format","title","GistsList","gists","map","gist","created_at","description","id","API_PATH_BASE","process","REACT_APP_BASE_URL","fetchUserByUsername","createAsyncThunk","username","a","user","axios","get","response","data","usersReducer","createSlice","initialState","haveError","isLoading","error","reducers","extraReducers","fulfilled","state","action","payload","rejected","toast","message","getUserData","users","getAllGistByUser","gistReducer","pending","getGists","Home","useState","setUser","dispatch","useDispatch","userSelected","useSelector","type","placeholder","onKeyDown","e","keyCode","target","value","onChange","onClick","login","avatar_url","length","GistDetail","props","getContent","files","key","Object","keys","shift","content","getGist","this","match","params","then","setState","source","owner","React","Component","App","Router","exact","path","component","configureStore","reducer","Boolean","window","location","hostname","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.cf880784.chunk.js","sourcesContent":["import React from 'react'\nimport GitHubLogin from 'react-github-login';\nimport logo from '../../../assets/logo.svg';\nimport { Link } from 'react-router-dom';\n\nconst onSuccess = response => console.log(response);\nconst onFailure = response => console.error(response);\n\nexport const Navbar = () => {\n    return (\n        <React.Fragment>\n            <Link to=\"/\" >\n                <img alt=\"logo matter-supply\" className=\"header__image\" src={logo} />\n            </Link>\n            {/* <GitHubLogin clientId=\"c5e3ccd1e2237acc7a9f\"\n                redirectUri=\"http://localhost:3000/login\"\n                buttonText=\"Sign in\"\n                onSuccess={onSuccess}\n                onFailure={onFailure}\n                className=\"header__button\" /> */}\n            <button className=\"header__button\">Sign in</button>\n        </React.Fragment>\n    )\n}\n","import React from 'react'\n\nexport const User = ({ avatar, name }) => {\n    return (\n        <section className=\"user\">\n            <img src={avatar} alt=\"user-avatar\" className=\"user__avatar\" />\n            <h4 className=\"user__name\">{name}</h4>\n            <span className=\"user__posts\">Posts</span>\n        </section>\n    )\n}","import React from 'react'\nimport { parseISO, formatDistanceToNow, format } from 'date-fns'\n\nexport const TimeAgo = ({ timestamp, className }) => {\n    let timeAgo = ''\n    let dateFormat = ''\n    if (timestamp) {\n        const date = parseISO(timestamp);\n        const timePeriod = formatDistanceToNow(date)\n        dateFormat = format(date, 'MMMM dd/yyyy')\n        timeAgo = `${timePeriod} ago`\n    }\n\n    return (\n        <React.Fragment>\n            <span className=\"gists__element--date\">{dateFormat}</span>â€¢\n            <span className={className} title={timestamp}>\n                &nbsp; {timeAgo}\n            </span>\n        </React.Fragment>\n    )\n}\n","import React from 'react';\nimport { TimeAgo } from '../TimeAgo';\nimport { Link } from 'react-router-dom';\n\nexport const GistsList = ({ gists }) => {\n    return (\n        <section className=\"gists\">\n            <ul className=\"gists__list\">\n                {gists.map((gist) => (\n                    <li>\n                        <div className=\"gists__element\">\n                            <div>\n\n                                <TimeAgo className=\"gists__element--ago\" timestamp={gist.created_at}></TimeAgo>\n                                <h3 className=\"gists__element--title\">{gist.description}</h3>\n                            </div>\n\n                            <Link to={`/${gist.id}`} className=\"gists__element--link\">\n                                Read\n                            </Link>\n                        </div>\n                    </li>\n                ))}\n            </ul>\n        </section>\n    )\n}","import axios from 'axios';\n\nconst API_PATH_BASE = process.env.REACT_APP_BASE_URL || 'https://api.github.com';\n\nexport const getUserInfo = user => (\n    axios.get(`${API_PATH_BASE}/users/${user}`)\n);","import {\n    createSlice,\n    createAsyncThunk,\n} from '@reduxjs/toolkit'\nimport { getUserInfo } from '../../services/user'\nimport { toast } from 'react-toastify';\n\n\nconst initialState = { user: {}, haveError: false, isLoading: false, error: '' }\n\nexport const fetchUserByUsername = createAsyncThunk('users/fetchUserByUsername', async (username) => {\n    const response = await getUserInfo(username);\n    return response.data\n})\n\nconst usersReducer = createSlice({\n    name: 'users',\n    initialState,\n    reducers: {},\n    extraReducers: {\n        [fetchUserByUsername.fulfilled]: (state, action) => {\n            state.user = action.payload;\n\n        },\n        [fetchUserByUsername.rejected]: (state, action) => {\n            state.haveError = true;\n            state.isLoading = false;\n            state.error = action.error\n            toast.error(`Oops, something went wrong \\n ${state.error.message}`);\n        }\n    }\n})\nexport const getUserData = (state) => state.users.user\n\n\nexport default usersReducer.reducer","import axios from 'axios';\n\nconst API_PATH_BASE = process.env.REACT_APP_BASE_URL || 'https://api.github.com';\n\n\nexport const getAllGist = user => (\n  axios.get(`${API_PATH_BASE}/users/${user}/gists`)\n);\n\nexport const getGist = id => (\n  axios.get(`${API_PATH_BASE}/gists/${id}`)\n);","import {\n    createSlice,\n    createAsyncThunk,\n} from '@reduxjs/toolkit'\nimport { getAllGist, getGist } from '../../services/gist'\nimport { toast } from 'react-toastify';\n\n\nconst initialState = { gists: [], gist: {}, error: '', isLoading: false, haveError: false }\n\n\nexport const getAllGistByUser = createAsyncThunk('gist/getAllGistByUser', async (username) => {\n    const response = await getAllGist(username);\n    return response.data\n})\n\n\nconst gistReducer = createSlice({\n    name: 'gist',\n    initialState,\n    reducers: {},\n    extraReducers: {\n        [getAllGistByUser.fulfilled]: (state, action) => {\n            state.gists = action.payload;\n        },\n        [getAllGistByUser.pending]: (state, action) => {\n            state.isLoading = true;\n        },\n        [getAllGistByUser.rejected]: (state, action) => {\n            state.haveError = true;\n            state.isLoading = false;\n            state.error = action.error\n            toast.error(`Oops, something went wrong \\n ${state.error.message}`);\n        },\n    }\n})\n\nexport const getGists = (state) => state.gist.gists\nexport const haveError = (state) => state.gist.haveError\nexport const error = (state) => state.gist.error\nexport const isLoading = (state) => state.gist.isLoading\nexport default gistReducer.reducer","import React, { useState } from 'react'\nimport { User } from '../user/User';\nimport { GistsList } from '../gist/GistsList'\nimport { getUserData, fetchUserByUsername } from '../../reducer/userStore';\nimport { getAllGistByUser, getGists } from '../../reducer/gistStore';\nimport { useSelector, useDispatch } from 'react-redux'\n\nexport const Home = () => {\n    const [user, setUser] = useState('');\n    const dispatch = useDispatch();\n    const userSelected = useSelector(getUserData);\n    const gists = useSelector(getGists);\n\n    const onUsernameChange = (e) => setUser(e.target.value)\n\n    const onSearchClicked = () => {\n        if (user) {\n            dispatch(fetchUserByUsername(user));\n            dispatch(getAllGistByUser(user))\n        }\n    }\n\n    const keyPress = (e) => {\n        if (e.keyCode === 13) {\n            setUser(e.target.value);\n            if (user) {\n                dispatch(fetchUserByUsername(user));\n                dispatch(getAllGistByUser(user))\n            }\n        }\n    }\n\n    return (\n        <section className=\"home\">\n            <div className=\"home__content\">\n                <h1>Blog msco.</h1>\n                <p>Explore the unknown. Uncover what matters. Prototype, test, repeat. Combine intuition with <br /> evidence. Design with intent and build it right.</p>\n                <div className=\"home__search\">\n                    <label>\n                        <input type=\"text\" placeholder=\"Keyword...\" onKeyDown={keyPress} onChange={onUsernameChange} />\n                    </label>\n                </div>\n                <button onClick={onSearchClicked}>Search</button>\n                {userSelected.login && <User avatar={userSelected.avatar_url} name={userSelected.name}></User>}\n                {gists.length > 0 && <GistsList gists={gists}></GistsList>}\n\n            </div>\n        </section>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport { TimeAgo } from '../TimeAgo';\nimport { User } from '../user/User'\nimport { useDispatch } from 'react-redux'\nimport { getGist } from '../../../services/gist'\nimport ReactMarkdown from 'react-markdown';\nimport 'github-markdown-css';\nimport { unwrapResult } from '@reduxjs/toolkit'\n\nexport default class GistDetail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gist: null,\n            isLoading: true\n        };\n    }\n\n    getContent = (gist) => {\n        if (gist && gist.files) {\n            const key = Object.keys(gist.files).shift();\n            return gist.files[key].content;\n        }\n    }\n\n    componentDidMount() {\n        const { id } = this.props.match.params\n        getGist(id).then(data => this.setState({ gist: data.data, isLoading: false }));\n    }\n\n\n    render() {\n        return (\n            <section className=\"gistDetail\">\n                {(!this.state.isLoading) && <section className=\"post\">\n                    <TimeAgo className=\"gists__element--ago\" timestamp={this.state.gist.created_at}></TimeAgo>\n                    <h1>{this.state.gist.description}</h1>\n                    <div className='markdown-body'>\n                        <ReactMarkdown source={this.getContent(this.state.gist)} />\n                    </div>\n                    <User avatar={this.state.gist.owner.avatar_url} name={this.state.gist.owner.login}></User>\n                </section>}\n            </section>\n        )\n\n    }\n}\n// export const GistDetail = ({ match }) => {\n\n//     \n\n\n//     let { content } = ''\n\n//     const input = content;//data.files['croosy-widget.md'].content\n//     return (\n//         <section className=\"gistDetail\">\n//             {/* {(data && data.owner) && <section className=\"post\">\n//                 <TimeAgo className=\"gists__element--ago\" timestamp={data.created_at}></TimeAgo>\n//                 <div className='markdown-body'>\n//                     <ReactMarkdown source={input} />\n//                 </div>\n//                 <User avatar={data.owner.avatar_url} name={data.owner.login}></User>\n\n//             </section>} */}\n//         </section>\n//     )\n// }","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from 'react-router-dom'\r\nimport './App.scss';\r\nimport { Navbar } from './app/components/navbar/Navbar';\r\nimport { Home } from './app/components/home/Home'\r\nimport GistDetail from './app/components/gist/GistDetail'\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <Router Router >\r\n        <header className=\"header\">\r\n          <Navbar />\r\n        </header>\r\n        <div className=\"App\">\r\n          <Switch>\r\n            <Route\r\n              exact\r\n              path=\"/\"\r\n              component={Home}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/:id\"\r\n              component={GistDetail}\r\n            />\r\n          </Switch>\r\n        </div>\r\n      </Router >\r\n\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport usersReducer from './reducer/userStore'\r\nimport gistReducer from './reducer/gistStore'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    users: usersReducer,\r\n    gist: gistReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n      <ToastContainer />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.5f7a4698.svg\";"],"sourceRoot":""}